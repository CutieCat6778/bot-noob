const { Collection, Permissions, MessageActionRow, MessageButton } = require('discord.js');

module.exports = class Event {
	constructor(Client, Message) {
		this.client = Client;
		this.message = Message;
		this.players = new Collection();
		this.currentQuestionPos = 1;
		this.currentQuestion = {};
		this.blockList = Client.eventBlocklist;
		this.questions = require('./data.json');
	}

	delay(ms) {
  		return new Promise(resolve => setTimeout(resolve, ms));
	}

	async start() {
		// Sending message
		const embed = {
			"title": "Ai l√† ng∆∞·ªùi th√¥ng minh nh·∫•t!",
			"description": "Tr√≤ ch∆°i s·∫Ω b·∫Øt ƒë·∫ßu trong 30s, h√£y react üëç ƒë·ªÉ c√≥ th·ªÉ tham gia n√†o!!!",
			"timestamp": new Date(),
			"footer": {
				"text": "C√°n b·ªô G√†",
				"icon_url": this.client.user.displayAvatarURL()
			}
		}
		const message = await this.message.channel.send({embeds: [embed]});
		message.react("üëç");

		// Collector
		const filter = (reaction, user) => reaction.emoji.name == "üëç" && !this.blockList.includes(user.id) && !user.bot;
		const collector = message.createReactionCollector({filter, time: 2000});
		embed.description += "\n\n**Ng∆∞·ªùi ch∆°i:**\n";
		collector.on('collect', (r, u) => {
			if(this.players.get(u.id)) return;
			embed.description += `<@${u.id}>`;
			this.players.set(u.id, []);
			message.edit({embeds: [embed]});
		})

		collector.on('end', collected => {
			message.delete();
			this.confirm();
		})
	}

	async confirm() {
		const endedEmbed = {
			"title": `H√∫ h√∫, ƒë√£ c√≥ kho·∫£ng ${this.players.size} ng∆∞·ªùi ch∆°i!`,
			"description": "Tr√≤ ch∆°i s·∫Ω b·∫Øt ƒë·∫ßu trong v√†i gi·∫ßy, h√£y c·ªë g·∫Øng ƒë·ªÉ th·∫Øng n√†o!!!",
			"timestamp": new Date(),
			"footer": {
				"text": "C√°n b·ªô G√†",
				"icon_url": this.client.user.displayAvatarURL()
			}
		}

		const endedMessage = await this.message.channel.send({embeds: [endedEmbed]});
		endedMessage.react("‚úÖ");
		const filter = (reaction, user) => reaction.emoji.name == "‚úÖ" && (this.message.guild.members.cache.get(user.id).permissions.has(Permissions.FLAGS["MANAGE_GUILD"]) || user.id === "924351368897106061")  && !user.bot;
		const collector2 = endedMessage.createReactionCollector({filter, time: 2000});
		collector2.on('collect', async (r, u) => {
			endedMessage.delete();
			await this.delay(1000);
			this.counter();
		})
	}

	wait(embed, message, counter) {
		embed.title = "B·∫Øt ƒë·∫ßu trong " + counter + "gi√¢y!";
		message.edit({embeds: [embed]});
		counter--;
		return setTimeout(() => {
			if(counter == 0) {
				message.delete();
				return this.main();
			}
			else if(counter > 0) return this.wait(embed, message, counter);
		}, 1000)
	}

	async counter() {
		const guide = {
			"title": "H∆∞·ªõng d·∫´n ch∆°i game!",
			"description": `M·ªói c√¢u h·ªèi s·∫Ω c√≥ 4 ƒë√°p √°n, v√† s·∫Ω c√≥ 4 n√∫t ƒë∆∞·ª£c hi·ªán ra d∆∞·ªõi tin nh·∫Øn, t∆∞∆°ng ·ª©ng v·ªõi 4 ƒë√°p √°n ƒë∆∞·ª£c ƒë∆∞a ra! ƒêi·ªÉm s·∫Ω ƒë∆∞·ª£c t√≠nh b·ªüi t·ªëc ƒë·ªô v√† ƒë·ªô ch√≠nh x√°c c·ªßa c√¢u h·ªèi, cho n√™n h√£y b·∫≠t m·∫°ng c·ªßa m√¨nh cho l√™n ƒëi. M·∫°ng k√©m th√¨ ngh·ªâ m·∫π ƒëi :>`,
			"timestamp": new Date(),
			"footer": {
				"text": "C√°n b·ªô G√†",
				"icon_url": this.client.user.displayAvatarURL()
			}
		};

		await this.message.channel.send({embeds: [guide]});

		const embed = {
			"title": "Tr√≤ ch∆°i b·∫Øt ƒë·∫ßu!",
			"description": `S·ªë ng∆∞·ªùi ch∆°i l√†: ${this.players.size}\n\n**M·ªçi ng∆∞·ªùi ch∆°i h√£y chu·∫©n b·ªã, cƒÉng c∆° m√¥ng, g·ªìng c∆° n√£o ƒë·ªÉ tr·ªü th√†nh nh√† v√¥ ƒëich n√†o!**`,
			"timestamp": new Date(),
			"footer": {
				"text": "C√°n b·ªô G√†",
				"icon_url": this.client.user.displayAvatarURL()
			}
		}

		const message = await this.message.channel.send({embeds: [embed]});
		let counter = 5;
		return this.wait(embed, message, counter);
	}

	shuffle(array) {
	  let currentIndex = array.length,  randomIndex;

	  // While there remain elements to shuffle...
	  while (currentIndex != 0) {

	    // Pick a remaining element...
	    randomIndex = Math.floor(Math.random() * currentIndex);
	    currentIndex--;

	    // And swap it with the current element.
	    [array[currentIndex], array[randomIndex]] = [
	      array[randomIndex], array[currentIndex]];
	  }

	  return array;
	}

	async ask(data) {
		const falseAns = this.shuffle(data.false);
		let answer = [...falseAns.slice(0, 3)];
		answer.push(data.correct);
		answer = this.shuffle(answer);
		const embed = {
			"title": "10 gi√¢y ƒë·ªÉ ƒë·ªçc ƒë√°p c√¢u h·ªèi",
			"description": `**${data.content}**`,
			"fields": [
				{
					"name": "ƒê√°p √°n A",
					"value": answer[0],
					"inline": true,
				},
				{
					"name": "ƒê√°p √°n B",
					"value": answer[1],
					"inline": true,
				},
				{
					name: '\u200b',
					value: '\u200b',
					inline: false,
				},
				{
					"name": "ƒê√°p √°n C",
					"value": answer[2],
					"inline": true,
				},
				{
					"name": "ƒê√°p √°n D",
					"value": answer[3],
					"inline": true,
				},
			],
			"timestamp": new Date(),
			"footer": {
				"text": "C√°n b·ªô G√†",
				"icon_url": this.client.user.displayAvatarURL()
			}
		}

		function returnButtonAns(id, correct) {
			return new MessageButton()
				.setCustomId(`answer_${id}`)
				.setLabel(`ƒê√°p √°n ${id.toUpperCase()}`)
				.setStyle(correct ? "SUCCESS" : "DANGER")
				.setDisabled(true);
		}

		function returnButtonDis(id) {
			return new MessageButton()
				.setCustomId(`answer_${id}`)
				.setLabel(`ƒê√°p √°n ${id.toUpperCase()}`)
				.setStyle("PRIMARY")
				.setDisabled(true);
		}

		function returnButton(id) {
			return new MessageButton()
				.setCustomId(`answer_${id}`)
				.setLabel(`ƒê√°p √°n ${id.toUpperCase()}`)
				.setStyle("PRIMARY")
				.setDisabled(false);
		}
		

		const rowDis = new MessageActionRow()
			.addComponents(
				returnButtonDis('a')
			)
			.addComponents(
				returnButtonDis('b')
			)
			.addComponents(
				returnButtonDis('c')
			)
			.addComponents(
				returnButtonDis('d')
			);
		const row = new MessageActionRow()
			.addComponents(
				returnButton('a')
			)
			.addComponents(
				returnButton('b')
			)
			.addComponents(
				returnButton('c')
			)
			.addComponents(
				returnButton('d')
			);

		const rowAns = new MessageActionRow()
			.addComponents(
				returnButtonAns('a', answer[0] == data.correct)
			)
			.addComponents(
				returnButtonAns('b', answer[1] == data.correct)
			)
			.addComponents(
				returnButtonAns('c', answer[2] == data.correct)
			)
			.addComponents(
				returnButtonAns('d', answer[3] == data.correct)
			)

		const question = await this.message.channel.send({embeds: [embed], components: [rowDis], ephemeral: true});
		setTimeout(() => {
			const currentTime = new Date().getTime();
			question.edit({embeds: [embed], components: [row], ephemeral: true});
			const filter = i => i.customId.startsWith('answer_') && this.players.has(i.user.id);
			const collector = question.channel.createMessageComponentCollector({ filter, time: 30000 })

			let collected = 0;

			collector.on('collect', (i) => {
				collected++;
				const time = new Date().getTime();
				const player = this.players.get(i.user.id);
				player.push({
					time: time - currentTime,
					questionPos: this.currentQuestionPos,
					answer: i.customId
				})
				i.deferUpdate();
				if(collected == this.players.size) return collector.stop();
			})

			collector.on('end', (i) => {
				console.log(this.players);
				question.edit({embeds: [
					{
						"title": "ƒê√£ k·∫øt th√∫c",
						"description": `ƒê√£ nh·∫≠n ƒë∆∞·ª£c t·ªïng c·ªông ${i.size} ƒë√°p √°n, sau v√†i gi√¢y s·∫Ω c√¥ng b·ªë b·∫≥ng x·∫øp h·∫°ng.`,
						"timestamp": new Date(),
						"footer": {
							"text": "C√°n b·ªô G√†",
							"icon_url": this.client.user.displayAvatarURL()
						}
					}
				], components: [rowAns], ephemeral: true,})
			})
		}, 10000)
	}

	end() {
		this.message.channel.send("CEK!!");
	}

	async main() {
		const questions = this.shuffle(this.questions);
		const question = questions.shift();
		this.currentQuestionPos = question.id;
		return this.ask(question);
	}
}